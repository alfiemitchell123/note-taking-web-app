name: CI Workflow

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    build:
        runs-on: ubuntu-latest

        services:
            mysql:
                image: mysql:8.0
                env:
                    MYSQL_ROOT_PASSWORD: luxor
                    MYSQL_DATABASE: note_taking_app
                ports:
                    - 3306:3306
                options: >-
                    --health-cmd="mysqladmin ping --silent"
                    --health-timeout=5s
                    --health-retries=3

        steps:
            # Checkout the code
            - name: Checkout code
              uses: actions/checkout@v3

            # Set up Node.js
            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                node-version: '22.12.0'

            # Install dependencies
            - name: Install dependencies
              run: |
                npm install

            # Lint the code
            - name: Lint the code
              run: |
                npm run lint

            # Set up Docker
            - name: Set up Docker
              uses: docker/setup-buildx-action@v2

            # Build and start services using Docker Compose
            - name: Build and start services using Docker Compose
              run: |
                docker compose -f docker-compose.yml up -d --build

            # Wait for MySQL to be ready
            - name: Wait for MySQL to be ready
              run: |
                until mysql -h 127.0.0.1 -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} -e "show databases"; do
                  echo "Waiting for MySQL..."
                  sleep 2
                done

            # Run Jest tests
            - name: Run Jest tests
              env:
                DB_HOST: ${{ secrets.DB_HOST }}
                DB_USER: ${{ secrets.DB_USER }}
                DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
                DB_NAME: ${{ secrets.DB_NAME }}
              run: |
                  npm run test -- --coverage

            # Stop Docker Compose services
            - name: Stop Docker Compose services
              run: |
                  docker compose down --volumes --rmi all --remove-orphans